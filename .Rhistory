# Step 01 ---- KOSPI 데이터 불러오기 ----
library(quantmod)
library(dplyr)
library(CausalImpact)
library(zoo)
options(scipen = 100)
# KOSPI 지수의 ticker Symbol ^KS11
# 애플: AAPL
# 삼성전자: 005930.KS
KOSPI = getSymbols("^KS11",
from = "2020-01-01",
to = Sys.time(),
auto.assign = FALSE)
# Step 02 ---- 데이터 가공 ----
str(KOSPI)
# 시가보다 종가가 높을 경우 "up", 시가가 종가보다 낮을 경우 "down"
sample = data.frame(date = time(KOSPI),
KOSPI,
growth = ifelse(Cl(KOSPI) > Op(KOSPI),
"up", "down"))
colnames(KOSPI)
# 컬럼명 변경
colnames(sample) = c("date", "Open", "High", "Low",
"Close", "Volume", "Adjusted", "growth")
# 데이터 확인
glimpse(sample)
summary(sample)
data = sample %>%
dplyr::select(date, Close, Volume)
data2 = na.omit(data)
start = "2020-01-01"
end = "2020-10-31"
data3 = data2 %>%
filter(date > start & date < end) %>%
read.zoo()
data3
# 1차 코로나 확산 이전 데이터 확률
pre.period = as.Date(c(start, "2020-02-20"))
# 대구 락다운 발표 조치 이후 (이벤트!)
post.period = as.Date(c("2020-02-28", end))
# 모형 학습
impact = CausalImpact(data3, pre.period, post.period)
plot(impact)
summary(impact)
impact$report
impact$summary
# 마케팅 데이터셋 sample
library(datarium)
data(marketing)
glimpse(marketing)
marketing2 = marketing %>%
mutate(dates = seq(as.Date("2021-01-01"), by = "day", length.out = 200)) %>%
dplyr::select(dates, sales, everything()) %>%
read.zoo()
start = "2020-01-01"
end = "2021-10-31"
data3 = data2 %>%
filter(date > start & date < end) %>%
read.zoo()
data3
# 1차 코로나 확산 이전 데이터 확률
pre.period = as.Date(c(start, "2020-02-20"))
# 대구 락다운 발표 조치 이후 (이벤트!)
post.period = as.Date(c("2020-02-28", end))
# 모형 학습
impact = CausalImpact(data3, pre.period, post.period)
plot(impact)
summary(impact)
impact$report
impact$summary
# 마케팅 데이터셋 sample
library(datarium)
data(marketing)
glimpse(marketing)
marketing2 = marketing %>%
mutate(dates = seq(as.Date("2021-01-01"), by = "day", length.out = 200)) %>%
dplyr::select(dates, sales, everything()) %>%
read.zoo()
start = "2020-01-01"
end = "2021-10-31"
pre.period = as.Date(c(start, "2021-04-01"))
post.period = as.Date(c("2021-04-10", end))
impact = CausalImpact(marketing2, pre.period, post.period)
plot(impact)
summary(impact)
library(tidyverse)# metapackage with lots of helpful functions
library(plotly)
library(GGally)
library(knitr)
library(kableExtra)
library(reshape)
library(reshape)
library(MLmetrics)
library(lightgbm)
library(caret)
library(Hmisc)a
library(Hmisc)
library(tidyverse)
library(nycflights13)
install.packages("nycflights13", lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
library(nycflights13)
airliines
airlines
install.packages("forcats", lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
library(tidyverse)
library(skimr)
library(GGally)
library(plotly)
library(viridis)
library(caret)
library(DT)
library(data.table)
library(lightgbm)
library(xgboost)
library(kableExtra)
library(magrittr)
set.seed(0)
cat("Loading data...\n")
DATA_PATH = "data/home-credit-default-risk"
na_strings = c("NA", "NaN", "?", "")
# code
train = fread(paste0(DATA_PATH, "application_train.csv"),
stringsAsFactors = FALSE,
data.table = FALSE, na.strings = na_strings)
DATA_PATH = "./data/home-credit-default-risk/"
na_strings = c("NA", "NaN", "?", "")
# code
train = fread(paste0(DATA_PATH, "application_train.csv"),
stringsAsFactors = FALSE,
data.table = FALSE, na.strings = na_strings)
head(train)
train %>%
group_by(TARGET) %>%
summarise(Count = n())
train %>%
group_by(TARGET) %>%
summarise(Count = n() / nrow(train) * 100) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(TARGET = reorder(TARGET, Count)) %>%
ggplot(aes(x = TARGET, y = Count)) +
geom_bar(stat = "identity", fill = "#5D5BDE") +
geom_text(aes(x = TARGET, y = 1, label = paste0(round(Count, 2), " %")),
hjust = 0, vjust = .5, size = 3.5, colour = "white", fontface = "bold") +
coord_flip() +
theme_minimal()
train %>%
filter(!is.na(TARGET), CODE_GENDER != "XNA", CNT_FAM_MEMBERS <= 4) %>% # nrow() ~ 303498
group_by(age = -round(DAYS_BIRTH/365, 0),
gender = ifelse(CODE_GENDER == "M", "Male", "Female"),
status = ifelse(NAME_FAMILY_STATUS == "Civil marriage", "Married",
ifelse(NAME_FAMILY_STATUS == "Single / not married", "Single", as.character(NAME_FAMILY_STATUS)))) %>% # select(NAME_FAMILY_STATUS)
summarise(count = n(),
AVG_CREDIT = mean(AMT_CREDIT),
AVG_TARGET = mean(TARGET)) %>%
mutate(AVG_TARGET = pmin(pmax(AVG_TARGET, 0.00), 0.20) * 100) %>%
ggplot(aes(x = age, y = count, fill = AVG_TARGET)) +
geom_histogram(stat = "identity", width = 1) +
facet_grid(gender ~ status) +
scale_fill_gradient("Avg. Default Rate %", low = "white", high = "blue") +
labs(title = "Default Rate of Applicants (N = 303,498)",
subtitle = "Age, Gender, And Marriage Status",
caption = "Created by McBert") +
theme_minimal()
###
train %>%
filter(!is.na(TARGET), CODE_GENDER != "XNA", CNT_FAM_MEMBERS <= 4) %>% # nrow() ~ 303498
group_by(age = -round(DAYS_BIRTH/365, 0),
gender = ifelse(CODE_GENDER == "M", "Male", "Female"),
status = ifelse(NAME_FAMILY_STATUS == "Civil marriage", "Married",
ifelse(NAME_FAMILY_STATUS == "Single / not married", "Single", as.character(NAME_FAMILY_STATUS)))) %>% # select(NAME_FAMILY_STATUS)
summarise(count = n(),
AVG_CREDIT = mean(AMT_CREDIT),
AVG_TARGET = mean(TARGET)) %>%
mutate(AVG_TARGET = pmin(pmax(AVG_TARGET, 0.00), 0.20) * 100) %>%
ggplot(aes(x = age, y = count, fill = AVG_TARGET)) +
geom_histogram(stat = "identity", width = 1) +
facet_grid(gender ~ status) +
scale_fill_gradient("Avg. Default Rate %", low = "white", high = "blue") +
labs(title = "Default Rate of Applicants (N = 303,498)",
subtitle = "Age, Gender, And Marriage Status",
caption = "Created by McBert") +
theme_minimal()
summary(train$AMT_CREDIT)
# 시각화
train %>%
filter(AMT_CREDIT <= up_threshold) %>%
ggplot(aes(x = AMT_CREDIT)) +
geom_histogram(bins = 30, fill = "#5D5BDE") +
facet_grid(CODE_GENDER ~ TARGET) +
theme_minimal()
###
up_threshold = quantile(train$AMT_CREDIT, 0.975)
print(up_threshold)
# 시각화
train %>%
filter(AMT_CREDIT <= up_threshold) %>%
ggplot(aes(x = AMT_CREDIT)) +
geom_histogram(bins = 30, fill = "#5D5BDE") +
facet_grid(CODE_GENDER ~ TARGET) +
theme_minimal()
table(train$CNT_FAM_MEMBERS)
??fread
table(train$NAME_FAMILY_STATUS)
nrow(train)
train %>%
filter(!is.na(TARGET), CODE_GENDER != "XNA", CNT_FAM_MEMBERS <= 4) %>% # nrow() ~ 303498
group_by(age = -round(DAYS_BIRTH/365, 0),
gender = ifelse(CODE_GENDER == "M", "Male", "Female"),
status = ifelse(NAME_FAMILY_STATUS == "Civil marriage", "Married",
ifelse(NAME_FAMILY_STATUS == "Single / not married", "Single", as.character(NAME_FAMILY_STATUS)))) %>% # select(NAME_FAMILY_STATUS)
summarise(count = n(),
AVG_CREDIT = mean(AMT_CREDIT),
AVG_TARGET = mean(TARGET)) %>%
mutate(AVG_TARGET = pmin(pmax(AVG_TARGET, 0.00), 0.20) * 100) %>%
ggplot(aes(x = age, y = count, fill = AVG_TARGET)) +
geom_histogram(stat = "identity", width = 1) +
facet_grid(gender ~ status) +
scale_fill_gradient("Avg. Default Rate %", low = "white", high = "blue") +
labs(title = "Default Rate of Applicants (N = 303,498)",
subtitle = "Age, Gender, And Marriage Status",
caption = "Created by McBert") +
theme_minimal()
summarise(count = n())
summarise(count = n(train))
summarise(train)
library(scales)
train %>%
filter(!is.na(TARGET), CODE_GENDER != "XNA", CNT_FAM_MEMBERS <= 4) %>%
mutate(CODE_GENDER = ifelse(CODE_GENDER == "M", "Male", "Female"),
DEPT_INCOMES_RATIO = AMT_ANNUITY/AMT_INCOME_TOTAL) %>%
select(CODE_GENDER, DEPT_INCOMES_RATIO, TARGET) %>%
ggplot(aes(x = DEPT_INCOMES_RATIO, y = TARGET)) +
geom_smooth(se = FALSE) +
scale_x_continuous(name = "Debt / Incomes Ratio (%)",
limits = c(0, 0.5),
labels = percent_format(accuracy = 0.1)) +
# coord_cartesian(ylim=c(0.00, 0.15)) +
scale_y_continuous(name = "Avg. Default Rate (%)",
breaks = seq(0, 1, 0.01),
labels = percent_format(accuracy = 0.1)) +
facet_grid(~ CODE_GENDER) +
labs(title = "Default Rate by Dept/Incomes Ratio (N = 303,498)",
subtitle = "The Comparison between Female and Male",
caption = "Created by McBert") +
theme_minimal()
head(test)
test = fread(paste0(DATA_PATH, "application_test.csv"),
stringsAsFactors = FALSE,
data.table = FALSE, na.strings = na_strings)
head(test)
dim(bureau)
bureau = fread(paste0(DATA_PATH, "bureau.csv"),
stringsAsFactors = FALSE,
data.table = FALSE, na.strings = na_strings)
head(bureau)
dim(bureau)
dim(bur_balance)
bur_balance = fread(paste0(DATA_PATH, "bureau_balance.csv"),
stringsAsFactors = FALSE,
data.table = FALSE, na.strings = na_strings)
head(bur_balance)
table(bur_balance$SK_ID_BUREAU) %>% head(10)
table(train$SK_ID_CURR) %>% head(10)
library(pins)
??pins
mtcars <- tibble::as_tibble(mtcars)
board %>% pin_write(mtcars, "mtcars")
board <- board_temp()
board <- board_local() # share data across R sessions on the same computer
board <- board_folder("~/Dropbox") # share data with others using dropbox
board <- board_folder("Z:\\my-team\pins") # share data using a shared network drive
board <- board_rsconnect() # share data with RStudio Connect
